install.packages("rJava")
install.packages("DBI")
install.packages("RJDBC")
install.packages("XML")
install.packages("memoise")
install.packages("KoNLP")
install.packages("wordcloud")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("ggmap")
install.packages("rvest")
install.packages("RColorBrewer")
install.packages("data.table")
install.packages("dplyr")
install.packages("reshape")
library(rJava)
library(DBI)
library(RJDBC)
library(XML)
library(memoise)
library(KoNLP)
library(wordcloud)
library(dplyr)
library(ggplot2)
library(ggmap)
library(rvest)
library(RColorBrewer)
library(data.table)
library(reshape)
getwd()
scores <- data.frame(read.csv("class_scores.csv"))
scores
View(scores)
scores <- data.frame(read.csv("class_scores.csv", stringsAsFactors=FALSE))
scores
View(scores)
library(rJava)
library(DBI)
library(RJDBC)
library(XML)
library(memoise)
library(KoNLP)
library(wordcloud)
library(dplyr)
library(ggplot2)
library(ggmap)
library(rvest)
library(RColorBrewer)
library(data.table)
library(reshape)
str(scores)
head(scores)
head(scores)
# 하위 6개 보여줌
tail(scores)
summary(socres)
summarise(socres)
summarise(socores)
summarise(scores)
summary(scores)
dim(scores)
scores %>%
dplyr::rename("학번"=Stu_ID)
scores %>%
dplyr::rename(학번=Stu_ID)
scores %>%
dplyr::rename(학번 = Stu_ID,
학년 = grade,
등급 = class,
성별 = gender,
수학 = Math,
영어 = English,
과학 = Science,
마케팅 = Marketing,
작문 = Writing)
View(scores)
scores <- scores %>%
dplyr::rename(학번 = Stu_ID,
학년 = grade,
등급 = class,
성별 = gender,
수학 = Math,
영어 = English,
과학 = Science,
마케팅 = Marketing,
작문 = Writing)
View(scores)
scores %>%
dplyr::arrange(학번)
scores %>%
dplyr::arrange(desc(학번))
scores %>%
dplyr::filter(학년 == 1) %>%
dplyr::arrange(desc(학번))
scores %>%
dplyr::filter(학년 == 1,
성별 == M)
scores %>%
dplyr::filter(학년 == 1,
성별 == 'M')
scores %>%
dplyr::select(학번, 이름, 성별) %>%
dplyr::filter(학년 == 1) %>%
dplyr::arrange(desc(학번))
scores %>%
dplyr::select(학번, 학년, 성별) %>%
dplyr::filter(학년 == 1) %>%
dplyr::arrange(desc(학번))
scores %>%
dplyr::filter(!grade == 1) %>%
dplyr::top_n(n = 3, wt = 학번)
scores %>%
dplyr::filter(!scores$grade == 1) %>%
dplyr::top_n(n = 3, wt = 학번)
scores %>%
dplyr::filter(!학년 == 1) %>%
dplyr::top_n(n = 3, wt = 학번)
scores %>%
dplyr::filter(학년 == 1 | 학년 == 2) %>%
dplyr::arrange(학년, 학번)
scores %>%
dplyr::filter(학년 == 1 | 학년 == 2) %>%
dplyr::arrange(학년, 학번) %>%
tail(scores)
tail(scores)
scores %>%
dplyr::filter(학년 == 1 | 학년 == 2) %>%
dplyr::arrange(학년, 학번) %>%
tail(scores)
scores %>%
dplyr::filter(학년 == 1 | 학년 == 2) %>%
dplyr::arrange(학년, 학번) %>%
dplyr::top_n(n = 3, wt = 학년)
scores %>%
dplyr::filter(!학년 == 1) %>%
dplyr::top_n(n = 3, wt = 학번)
scores %>%
dplyr::filter(학년 == 1 | 학년 == 2) %>%
dplyr::arrange(학년, 학번) %>%
dplyr::top_n(n = 3)
scores %>%
dplyr::filter(학년 == 1 | 학년 == 2) %>%
dplyr::arrange(학년, 학번) %>%
scores %>%
dplyr::filter(학년 == 1 | 학년 == 2) %>%
dplyr::arrange(학년, 학번) %>%
###########################
scores %>%
dplyr::filter(학년 == 1 | 학년 == 2) %>%
dplyr::arrange(학년, 학번)
scores %>%
dplyr::filter(학년 == 1 | 학년 == 2) %>%
dplyr::arrange(학년, 학번)
scores %>%
dplyr::filter(!학년 == 1) %>%
dplyr::top_n(n = 3, wt = 학번)
scores %>%
dplyr::filter(!학년 == 1) %>%
dplyr::top_n(n = 3, wt = 학번)
scores %>%
dplyr::filter(!학년 == 1) %>%
dplyr::top_n(n = 3, wt = 학번)
scores %>%
dplyr::filter(!학년 == 1) %>%
dplyr::top_n(n = 3, wt = 수학)
scores %>%
dplyr::filter(!학년 == 1) %>%
dplyr::top_n(n = 3, wt = 영어)
scores %>%
dplyr::filter(!학년 == 1) %>%
dplyr::arrange(학번) %>%
dplyr::top_n(n = 3, wt = 수학)
scores %>%
dplyr::filter(!학년 == 1) %>%
dplyr::arrange(학번) %>%
dplyr::top_n(n = 3, wt = 수학)
scores <- scores %>%
dplyr::mutate(평균 = (수학+영어+과학+마케팅+작문) %/% 5)
scores %>%
dplyr::filter(학년 == 1 | 학년 == 2) %>%
dplyr::arrange(학년, 학번) %>%
tail
scores %>%
dplyr::filter(평균 >= 80)
scores %>%
dplyr::filter(평균 >= 80) %>%
dplyr::arrange(desc(평균), 학번)
scores %>%
dplyr::filter(수학 == 100 |
영어 == 100 |
과학 == 100 |
마케팅 == 100 |
작문 == 100)
scores %>%
dplyr::filter(!학번%%2==0,
성별 == 'M',
수학 >= 90,
과학 >= 90) %>%
dplyr::arrange(학번)
scores %>%
dplyr::filter(평균 >= 80) %>%
dplyr::select(학번, 평균) %>%
dplyr::arrange(desc(평균), 학번)
scores %>%
dplyr::filter(학번%%2 == 1,
성별 == 'M',
수학 >= 90,
과학 >= 90) %>%
dplyr::arrange(학번)
library(rJava)
library(DBI)
library(RJDBC)
library(XML)
library(memoise)
library(KoNLP)
library(wordcloud)
library(dplyr)
library(ggplot2)
library(ggmap)
library(rvest)
library(RColorBrewer)
library(data.table)
library(reshape)
drv <- JDBC(
driverClass = "oracle.jdbc.driver.OracleDriver",
classPath = "C:\\oraclexe\\app\\oracle\\product\\11.2.0\\server\\jdbc\\lib\\ojdbc6.jar"
)
conn <- dbConnect(drv,
"jdbc:oracle:thin:@localhost:1521:xe",
"hr",
"hr")
dbGetQuery(conn, "SELECT * FROM TABS")
cnt <- data.frame(dbGetQuery(conn, "select * from COUNTRIES"))
dep <- data.frame(dbGetQuery(conn, "select * from DEPARTMENTS"))
emp <- data.frame(dbGetQuery(conn, "select * from EMPLOYEES"))
empd <- data.frame(dbGetQuery(conn, "select * from EMP_DETAILS_VIEW"))
job <- data.frame(dbGetQuery(conn, "select * from JOBS"))
jobh <- data.frame(dbGetQuery(conn, "select * from JOB_HISTORY"))
loc <- data.frame(dbGetQuery(conn, "select * from LOCATIONS"))
reg <- data.frame(dbGetQuery(conn, "select * from REGIONS"))
emp %>%
select(everything())
cnt <- cnt %>%
dplyr::renam
cnt <- cnt %>%
dplyr::rename(국가아이디 = COUNTRY_ID,
국가명 = COUNTRY_NAME,
지역아이디 = REGION_ID)
View(cnt)
dep <- dep %>%
dplyr::rename(부서아이디 = DEPARTMENT_ID,
부서명 = DEPARTMENT_NAME,
매니저아이디 = MANAGER_ID,
위치아이디 = LOCATION_ID)
View(dep
View(dep)
dep <- dep %>%
dplyr::rename(부서아이디 = DEPARTMENT_ID,
부서명 = DEPARTMENT_NAME,
매니저아이디 = MANAGER_ID,
위치아이디 = LOCATION_ID)
View(dep)
View(dep)
emp <- emp %>%
dplyr::rename(직원아이디 = EMPLOYEE_ID,
이메일 = EMAIL,
전화번호 = PHONE_NUMBER,
채용일 = HIRE_DATE,
업무아이디 = JOB_ID,
연봉 = SALARY,
커미션비율 = COMMISSION_PCT,
매니저아이디 = MANAGER_ID,
부서아이디 = DEPARTMENT_ID)
View(emp)
emp <- emp %>%
dplyr::mutate(이름 = paste(FIRST_NAME, ' ', LAST_NAME))
View(emp)
emp <- emp %>%
dplyr::mutate(월급 = 연봉 %/% 12)
View(emp)
job <- job %>%
dplyr::rename(업무아이디 = JOB_ID,
업무명 = JOB_TITLE,
최소연봉 = MIN_SALARY,
최대연봉 = MAX_SALARY)
View(job)
jobh <- jobh %>%
dplyr::rename(직원아이디 = EMPLOYEE_ID,
업무시작일 = START_DATE,
업무종료일 = END_DATE,
업무아이디 = JOB_ID,
부서아이디 = DEPARTMENT_ID)
View(jobh)
loc <- loc %>%
dplyr::rename(위치아이디 = LOCATION_ID,
거리주소 = STREET_ADDRESS,
우편번호 = POSTAL_CODE,
도시 = CITY,
주 = STATE_PROVINCE,
국가아이디 = CONTRY_ID)
View(loc)
loc <- loc %>%
dplyr::rename(위치아이디 = LOCATION_ID,
거리주소 = STREET_ADDRESS,
우편번호 = POSTAL_CODE,
도시 = CITY,
주 = STATE_PROVINCE,
국가아이디 = CONTRY_ID)
loc <- loc %>%
dplyr::rename(위치아이디 = LOCATION_ID,
거리주소 = STREET_ADDRESS,
우편번호 = POSTAL_CODE,
도시 = CITY,
주 = STATE_PROVINCE,
국가아이디 = COUNTRY_ID)
View(loc)
reg <- reg %>%
dplyr::rename(지역아이디 = REGION_ID,
지역명 = REGION_NAME)
View(reg)
head(emp)
emp %>%
dplyr::select(직원아이디, 이름, 이메일, 전화번호, 채용일, 업무아이디, 연봉, 커미션비율, 매니저아이디, 부서아이디, 월급)
empp <- emp %>%
dplyr::select(직원아이디, 이름, 이메일, 전화번호, 채용일, 업무아이디, 연봉, 커미션비율, 월급, 매니저아이디, 부서아이디)
View(empp)
dd <- paste(dd, 11)
dd <- paste(123, 11)
dd
rm(dd)
if(is.data.frame(emp)) {
emp <- subset(emp, select = -c(FIRST_NAME, LAST_NAME))
}
View(emp)
emp %>%
dplyr::filter(연봉 >= 10000) %>%
dplyr::select(이름, 직원아이디, 연봉) %>%
dplyr::arrange(desc(연봉))
보너스지급내역서 <- data.frame(emp %>%
dplyr::filter(연봉 < 3000) %>%
dplyr::select(이름, 직원아이디, 연봉) %>%
dplyr::arrange(직원아이디)
)
View(보너스지급내역서)
보너스지급내역 <- emp %>%
dplyr::mutate(보너스=sprintf("%0.0f 만원", 연봉*0.01))
View(보너스지급내역서)
emp
보너스지급내역 <- 보너스지급내역 %>%
dplyr::mutate(보너스 = sprintf("%0.0f 만원", 연봉*0.01))
View(보너스지급내역서)
View(보너스지급내역)
rm(보너스지급내역)
View(보너스지급내역서)
보너스지급내역서 <- 보너스지급내역서 %>%
dplyr::mutate(보너스 = sprintf("%0.0f 만원", 연봉*0.01))
View(보너스지급내역서)
ceo_sal <- apply(emp %>%
select(SALARY), 2, max)
ceo_sal <- apply(emp %>%
select(연봉), 2, max)
emp %>%
filter(연봉 == ceo_sal) %>%
select(이름)
rm(보너스지급내역서)
View(보너스지급내역서)
보너스지급내역서 <- data.frame(emp %>%
dplyr::filter(연봉 < 3000) %>%
dplyr::mutate(보너스 = sprintf("%0.0f 만원", 연봉*0.01)) %>%
dplyr::select(이름, 직원아이디, 연봉, 보너스) %>%
dplyr::arrange(직원아이디)
)
View(보너스지급내역서)
View(emp)
View(보너스지급내역서)
wirte.csv(보너스지급내역서)
write.csv(보너스지급내역서)
getwd()
emp %>%
dplyr::filter(연봉 == 24000) %>%
dplyr::select(이름)
emp %>%
dplyr::filter(연봉 == apply(emp %>%
select(연봉), 2, max)
) %>%
dplyr::select(이름)
getwd()
setwd("C:/Users/Administrator/rlangweekend/Project180728"")
write.csv(보너스지급내역서)
write.csv(보너스지급내역서.csv)
setwd("C:/Users/Administrator/rlangweekend/Project180728")
setwd("C:/Users/Administrator/rlangweekend/Project180728")
write.csv(보너스지급내역서)
write.csv(보너스지급내역서, 보너스지급내역서.csv, row.names(TRUE))
write.csv(보너스지급내역서, file="보너스지급내역서.csv", row.names(TRUE))
write.csv(보너스지급내역서, "C:/Users/Administrator/rlangweekend/Project180728/보너스지급내역서.csv")
setwd("C:/Users/Administrator/rlangweekend/Project180728")
write.csv(보너스지급내역서, "보너스지급내역서.csv", row.names(TRUE))
write.csv(보너스지급내역서, "보너스지급내역서.csv", row.names=TRUE)
write.csv(보너스지급내역서, "보너스지급내역서11.csv", row.names=TRUE)
write.csv(보너스지급내역서, "보너스지급내역서11.csv", row.names=FALSE)
emp %>%
dplyr::filter(연봉 > 10000) %>%
dplyr::select(이름, 연봉, 부서명 = dep %>%
dplyr::filter(dep$부서아이디 == emp$부서아이디) %>%
dplyr::select(dep$부서명))
emp_dep <- merge(x = emp, y = dep, by = 부서아이디)
emp_dep <- merge(x = emp, y = dep, by = '부서아이디')
emp_dep
View(emp_dep)
